var data=data||{issues:[]},stories=data.issues.map((a,b)=>(a.index=b+1,a.goal=!1,a.active=!0,a)),tasks=data.issues.flatMap((a,b)=>a.fields.subtasks.map(c=>(c.index=b+1,c.parent=a.key,c.active=!0,c)));Vue.component('configuration',{props:['application','settings','design'],template:`
    <v-navigation-drawer fixed clipped class="print-media">
        <v-toolbar flat>
            <v-list>
                <v-list-tile>
                    <v-list-tile-title class="title">
                    {{ application }}
                    </v-list-tile-title>
                </v-list-tile>
            </v-list>
        </v-toolbar>
        <v-divider></v-divider>
        <v-subheader>SETTINGS</v-subheader>
        <v-form class="sub-panel settings">
            <v-layout>
                <v-flex md11>
                    <v-select outline :items="settings.types" label="Type" v-model="settings.type" v-on:change="onChangeType"></v-select>
                    <v-text-field outline label="Excludes" clearable v-model="settings.excludes" v-on:change="onChangeExcludes" v-on:click:clear="onClearExcludes" placeholder="Summary or ID"></v-text-field>
                    <v-text-field outline label="Sprint Goal" clearable v-model="settings.goals" v-on:change="onChangeGoals" v-on:blur="onChangeGoals" v-on:click:clear="onClearGoals" placeholder="ID"></v-text-field>
                </v-flex>
            </v-layout>
        </v-form>
        <v-divider></v-divider>
        <v-subheader>CARD DESIGN</v-subheader>
        <v-form class="sub-panel card-design">
            <v-layout>
                <v-flex md11>
                    <v-checkbox label="Ordering" color="primary" v-model="design.ordering"></v-checkbox>
                    <v-select outline v-model="design.badge" :items="['Dots', 'Point']" label="Badge Options"/>
                    <v-checkbox label="Show status" color="primary" v-model="design.status"></v-checkbox>
                </v-flex>
            </v-layout>
        </v-form>
        <v-divider></v-divider>
    </v-navigation-drawer>
    `,methods:{containsAny(a,b){return a.every(function(a){return-1==b.indexOf(a)})},getIssues(){return''==this.settings.type?[]:this.isSubTask()?tasks:stories},isSubTask(){let a=this.settings.type;return'Sub-Task'==a},isStory(){return!this.isSubTask()},extractToArray(a){return''==a||null==a?[]:a.split(',').map(a=>a.trim()).filter(a=>null!=a).filter(a=>''!=a)},getExcludes(){return this.extractToArray(this.settings.excludes)},getGoals(){return this.extractToArray(this.settings.goals)},onChangeType(){vm.issues=this.getIssues(),this.onChangeExcludes()},onChangeExcludes(){let a=this.getIssues(),b=this.getExcludes();return 0==b.length?void this.onClearExcludes():void(vm.issues=this.getIssues().map(a=>(a.active=this.containsAny(b,a.fields.summary),a)))},onClearExcludes(){let a=stories.map(a=>(a.active=!0,a)),b=tasks.map(a=>(a.active=!0,a));vm.issues=this.isStory()?a:b},onChangeGoals(){let a=this.getGoals();if(0==a.length)return void this.onClearGoals();let b=stories.map(b=>(b.goal=!this.containsAny(a,b.key),b));this.isStory()&&(vm.issues=b)},onClearGoals(){let a=stories.map(a=>(a.goal=!1,a));this.isStory()&&(vm.issues=a)}}}),Vue.component('issues',{props:['issues','configuration','error'],template:`
    <v-content v-if="error" class="no-padding">
        <v-alert :value="true" type="warning">Something errors</v-alert>
    </v-content>
    <v-content v-else class="no-padding">
        <div class="issues" :class="wrapper">
            <issue
                v-for="(issue, index) in issues"
                v-bind:issue="issue"
                v-bind:index="index"
                v-bind:configuration="configuration"
                :key="issue.id">
            </issue>
        </div>
    </v-content>
    `,computed:{wrapper(){return this.issues[0]&&this.issues[0].fields.subtasks?'issue-rectangle':'issue-square'}}}),Vue.component('issue',{props:['issue','index','configuration'],template:`
    <div v-if="issue.active" class="issue" :class="type">
        <div class="issue-content">
            <div class="issue-header">
                <div class="issue-key">
                    <b v-if="parent">{{ issue.parent }}/</b><span>{{ issue.key }}</span>
                </div>
                <span v-if="configuration.design.ordering" class="index end">{{ issue.index }}</span>
            </div>
            <div v-if="task && configuration.design.status" class="issue-status">
                <span class="status">suspended</span>
            </div>
            <div class="issue-summary">
                <div class="summary">{{ issue.fields.summary.length < 100 ? issue.fields.summary : issue.fields.summary.substring(0, 100) + "..." }}</div>
            </div>
            <div v-if="issue.goal" class="issue-goal">
                <img src="https://cdn2.iconfinder.com/data/icons/carnival-4/48/75-512.png" />
            </div>
            <div class="issue-footer">
                <span
                    v-if="story && configuration.design.badge =='Point'"
                    class="badge">
                    {{issue.fields.customfield_10002}}
                </span>
                <span
                    v-if="story && configuration.design.badge == 'Dots'"
                    v-for="point in issue.fields.customfield_10002"
                    v-bind:point="point"
                    :key="point"
                    class="badge">
                    {{point}}
                </span>
            </div>
        </div>
    </div>
    `,computed:{type(){return'Sub-Task'==this.$props.issue.fields.issuetype.name?'issue-square':'issue-rectangle'},story(){return'Sub-Task'!=this.$props.issue.fields.issuetype.name},task(){return'Sub-Task'==this.$props.issue.fields.issuetype.name},parent(){return this.$props.issue.parent},goal(){return'Sub-Task'!=this.$props.issue.fields.issuetype.name&&this.$props.issue.goal}}});var vm=new Vue({el:'#app',data:{issues:[],configuration:{application:'JIRABLE',settings:{types:['Story','Sub-Task'],type:'',excludes:''},design:{ordering:!0,badge:'Dots',status:!0,goals:''}},error:data.error||!1}});