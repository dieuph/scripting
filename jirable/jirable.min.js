var data=data||{issues:[]},stories=data.issues.map((a,b)=>(a.index=b+1,a.goal=!1,a.active=!0,a)),tasks=data.issues.flatMap((a,b)=>a.fields.subtasks.map(c=>(c.index=b+1,c.parent=a.key,c.active=!0,c)));Vue.component('configuration',{props:['application','settings','design'],template:`
    <v-navigation-drawer fixed clipped class="print-media">
        <v-toolbar flat dense short>
            {{ application }}
        </v-toolbar>
        <v-divider></v-divider>
        <v-subheader>SETTINGS</v-subheader>
        <v-form class="sub-panel settings">
            <v-layout>
                <v-flex md11>
                    <v-select outlined single-line clearable dense
                        label="Type"
                        :items="settings.types"
                        v-model="settings.type"
                        v-on:change="onChangeType"
                        v-on:click:clear="onClearType">
                    </v-select>
                    <v-text-field outlined single-line clearable dense v-show="isDisplayIncludes()"
                        label="Includes"
                        v-model="settings.includes"
                        v-on:change="onChangeIncludes"
                        v-on:click:clear="onClearIncludes">
                        <template v-slot:append>
                            <v-tooltip bottom>
                                <template v-slot:activator="{on}">
                                    <v-icon v-on="on">mdi-help-circle-outline</v-icon>
                                </template>
                                Fill id, separate by comma.
                            </v-tooltip>
                        </template>
                    </v-text-field>
                    <v-text-field outlined single-line clearable dense
                        label="Excludes"
                        v-model="settings.excludes"
                        v-on:change="onChangeExcludes"
                        v-on:click:clear="onClearExcludes">
                        <template v-slot:append>
                            <v-tooltip bottom>
                                <template v-slot:activator="{on}">
                                    <v-icon v-on="on">mdi-help-circle-outline</v-icon>
                                </template>
                                Fill summary text or id, separate by comma.
                            </v-tooltip>
                        </template>
                    </v-text-field>
                    <v-text-field outlined single-line clearable dense
                        label="Sprint Goal"
                        v-model="settings.goals"
                        v-on:change="onChangeGoals" 
                        v-on:blur="onChangeGoals"
                        v-on:click:clear="onClearGoals">
                        <template v-slot:append>
                            <v-tooltip bottom>
                                <template v-slot:activator="{on}">
                                    <v-icon v-on="on">mdi-help-circle-outline</v-icon>
                                </template>
                                Fill id, separate by comma.
                            </v-tooltip>
                        </template>
                    </v-text-field>
                </v-flex>
            </v-layout>
        </v-form>
        <v-divider></v-divider>
        <v-subheader>CARD DESIGN</v-subheader>
        <v-form class="sub-panel card-design">
            <v-layout>
                <v-flex md11>
                    <v-checkbox label="Ordering" color="primary" v-model="design.ordering"></v-checkbox>
                    <v-checkbox label="Task status" color="primary" v-model="design.status"></v-checkbox>
                    <v-select outlined single-line clearable dense
                        label="Badge Options"
                        v-model="design.badge"
                        :items="['Dots', 'Point']">
                    </v-select>
                </v-flex>
            </v-layout>
        </v-form>
        <v-divider></v-divider>
    </v-navigation-drawer>
    `,methods:{containsAny(a,b){b=b?b.trim().toLowerCase():'';let c=a.filter(a=>-1!=b.indexOf(a.trim().toLowerCase()));return 0!=c.length},getIssues(){return null==this.settings.type||''==this.settings.type?[]:this.isSubTask()?tasks:this.isStory()?stories:this.isStandalone()?[]:[]},isSubTask(){return this.settings.type&&'Sub-Task'==this.settings.type},isStory(){return this.settings.type&&'Story'==this.settings.type},isStandalone(){return this.settings.type&&'Standalone'==this.settings.type},extractToArray(a){return''==a||null==a?[]:a.split(',').map(a=>a.trim()).filter(a=>null!=a).filter(a=>''!=a)},getIncludes(){return this.extractToArray(this.settings.includes)},getExcludes(){return this.extractToArray(this.settings.excludes)},getGoals(){return this.extractToArray(this.settings.goals)},isDisplayIncludes(){return this.isStandalone()},isDisplayGoals(){return this.isStory()},onChangeType(){vm.issues=this.getIssues(),this.onChangeExcludes()},onClearType(){this.settings.type=void 0,this.settings.excludes=void 0,this.settings.goals=void 0},onChangeIncludes(){let a=this.getIncludes();if(0==a.length)return void this.onClearIncludes();let b=stories.map(b=>(b.active=!this.containsAny(a,b.key),b)),c=tasks.map(b=>(b.active=!this.containsAny(a,b.parent),b));vm.issues=b.concat(c)},onClearIncludes(){},onChangeExcludes(){let a=this.getIssues(),b=this.getExcludes();return 0==b.length?void this.onClearExcludes():void(vm.issues=vm.issues.map(a=>(this.isStandalone()?!0==a.active&&(a.active=this.containsAny(b,a.fields.summary)):a.active=!this.containsAny(b,a.fields.summary)&&!this.containsAny(b,a.key),a)))},onClearExcludes(){let a=stories.map(a=>(a.active=!0,a)),b=tasks.map(a=>(a.active=!0,a));vm.issues=this.isStory()?a:this.isSubTask()?b:[]},onChangeGoals(){let a=this.getGoals();if(0==a.length)return void this.onClearGoals();let b=stories.map(b=>(b.goal=this.containsAny(a,b.fields.summary)||this.containsAny(a,b.key),b));this.isStory()&&(vm.issues=b)},onClearGoals(){let a=stories.map(a=>(a.goal=!1,a));this.isStory()&&(vm.issues=a)}}}),Vue.component('issues',{props:['issues','configuration','error'],template:`
    <v-content v-if="error" class="no-padding">
        <v-alert :value="true" type="warning">Something errors</v-alert>
    </v-content>
    <v-content v-else class="no-padding">
        <div class="issues" :class="wrapper">
            <issue
                v-for="(issue, index) in issues"
                v-bind:issue="issue"
                v-bind:index="index"
                v-bind:configuration="configuration"
                :key="issue.id">
            </issue>
        </div>
    </v-content>
    `,computed:{wrapper(){return this.issues[0]&&this.issues[0].fields.subtasks?'issue-rectangle':'issue-square'}}}),Vue.component('issue',{props:['issue','index','configuration'],template:`
    <div v-if="issue.active" class="issue" :class="type">
        <div class="issue-content">
            <div class="issue-header">
                <span v-if="configuration.design.ordering" class="index">{{ issue.index }}</span>
                <span v-if="parent" class="font-weight-bold">{{issue.parent}}</span>
                <span v-if="parent">/</span>
                <span v-bind:class="[parent ? '' : 'font-weight-bold']">{{issue.key}}</span>
            </div>
            <div v-if="task && configuration.design.status" class="issue-status">
                <span class="status">suspended</span>
            </div>
            <div class="issue-summary">
                <div class="summary">{{ issue.fields.summary.length < 100 ? issue.fields.summary : issue.fields.summary.substring(0, 100) + "..." }}</div>
            </div>
            <div v-if="issue.goal" class="issue-goal">
                <img src="https://cdn4.iconfinder.com/data/icons/thin-seo-marketing/24/thin-1540_target_goal_growth_success-512.png" />
            </div>
            <div class="issue-footer">
                <span
                    v-if="story && configuration.design.badge =='Point'"
                    class="badge">
                    {{issue.fields.customfield_10002}}
                </span>
                <span
                    v-if="story && configuration.design.badge == 'Dots'"
                    v-for="point in issue.fields.customfield_10002"
                    v-bind:point="point"
                    :key="point"
                    class="badge">
                    {{point}}
                </span>
            </div>
        </div>
    </div>
    `,computed:{type(){return'Sub-Task'==this.$props.issue.fields.issuetype.name?'issue-square':'issue-rectangle'},story(){return'Sub-Task'!=this.$props.issue.fields.issuetype.name},task(){return'Sub-Task'==this.$props.issue.fields.issuetype.name},parent(){return this.$props.issue.parent},goal(){return'Sub-Task'!=this.$props.issue.fields.issuetype.name&&this.$props.issue.goal}}});var vm=new Vue({el:'#app',vuetify:new Vuetify,data:{issues:[],configuration:{application:'JIRABLE',settings:{types:['Story','Sub-Task'],type:'',excludes:'',includes:'',goals:''},design:{ordering:!0,badge:'Dots',status:!0}},error:data.error||!1}});